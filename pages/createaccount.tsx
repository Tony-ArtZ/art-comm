import { createServerSupabaseClient } from "@supabase/auth-helpers-nextjs";
import artist from "../public/artist-login.svg";
import type {
  GetServerSidePropsContext,
  NextApiRequest,
  NextApiResponse,
} from "next";
import Image from "next/image";
import Head from "next/head";

export default function CreateAccount() {
  return(
    <>
      <Head>
        <title>CreateAccount</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center justify-center object-cover w-screen h-screen overflow-hidden bg-cover bg-signIn">
        <section className="flex flex-row p-1 w-fit md:p-0 bg-secondary md:drop-shadow-glowHigh rounded-3xl">
          <div className="w-96 h-96 xl:w-[520px] xl:h-[520px] hidden md:flex">
            <Image
              src={artist}
              alt="artist"
              className="w-full h-full drop-shadow-glowHigh"
            />
          </div>
          <div className=" h-96 w-96 xl:w-[580px] xl:h-[600px] p-8 m-2 xl:p-16 rounded-3xl bg-primary drop-shadow-glow ">
            <h1 className="text-4xl xl:text-[52px] text-heading drop-shadow-glow font-Inter ">
              Create New Account
            </h1>
            <form
              className="flex flex-col items-center justify-center w-full mt-10 h-fit xl:mt-20 gap-4"
              id="signIn"
            >
              <input
                className="input-field"
                placeholder="Email"
                type="email"
              />
              <input
                className="input-field"
                placeholder="Password"
                type="password"
              />
              <button type="submit" form="signIn" className="btn-secondary">
                Sign-In
              </button>
            </form>
          </div>
        </section>
      </main>
    </>
  );
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  // Create authenticated Supabase Client
  const supabase = createServerSupabaseClient(ctx);
  // Check if we have a session
  const {
    data: { session },
  } = await supabase.auth.getSession();
  
  const user = session?.user

  const { count } = await supabase
    .from("Users")
    .select("*", { count: "exact" })
    .eq("id", user?.id);

    console.log(count, user?.id)

  if (count && count > 0) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {
      user: user?user.id:null
    }
  }
};
